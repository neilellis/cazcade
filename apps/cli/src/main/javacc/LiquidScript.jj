
/*
 * Copyright © 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING=false;
  STATIC=false;
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
}

PARSER_BEGIN(LiquidScriptParser)
package cazcade.cli.script;
import cazcade.cli.commands.*;
import cazcade.cli.builtin.*;
import cazcade.cli.*;
import java.io.*;
import java.util.*;


public class LiquidScriptParser
{

   public CommandFactory commandFactory;
   public CommandExecutor executor;
   public ShellSession shellSession;
   private  ScriptHelper helper = new ScriptHelper();

   private class NestedParserCommand implements ExecutableCommand {
       private String s;

       private NestedParserCommand(String s) {
          this.s= s;
       }

       public String execute() throws Exception {
           LiquidScriptParser nestedParser= new LiquidScriptParser(new FileInputStream(s));
           nestedParser.commandFactory= commandFactory;
           nestedParser.executor= executor;
           nestedParser.shellSession= shellSession;
           nestedParser.Script();
           return null;
       }
   }


}

PARSER_END(LiquidScriptParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\r"
| "\f"
| "\n"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < CREATE: "create" >
| < POOL: "pool" >
| < WHEN: "when" >
| < WITH: "with" >
| < EXEC: "exec" >

| < MILLISECONDS: "ms">
| < SECONDS: "s">
| < MINUTES: "m">
| < HOURS: "h">
| < DAYS: "d">


}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." ~["."] (["0"-"9"])* (<EXPONENT>)? (["f","F"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F"]
  >
| < DOUBLE_LITERAL:
        (["0"-"9"])+ "." ~["."] (["0"-"9"])* (<EXPONENT>)? ["d","D"]
      | "." (["0"-"9"])+ (<EXPONENT>)? ["d","D"]
      | (["0"-"9"])+ <EXPONENT> ["d","D"]
      | (["0"-"9"])+ (<EXPONENT>)? ["d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >

| < SHORT_OPTION: "-" ["a"-"z", "A"-"Z"] >

| < LONG_OPTION: "--" ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "-"])* >
}

MORE:
{
 "\""  {image.deleteCharAt(0);} : IN_STRING_LITERAL
}

<IN_STRING_LITERAL>
TOKEN:
{
 <STRING_LITERAL: "\""> {matchedToken.image="\""+image.substring(image.charAt(0) == '>' ? 1 : 0,image.length()-1)+"\"";}   : DEFAULT
}



<IN_STRING_LITERAL>
TOKEN:
{
 <PARTIAL_STRING_LITERAL : "${" | "<%">
 {
 SwitchTo(DEFAULT);
 LiquidScriptParser nestedParser= new LiquidScriptParser(new LiquidScriptParserTokenManager(input_stream));
 /**matchedToken.image= "\""+image.substring(image.charAt(0) == '>' ? 1 : 0,image.length()-2)+"\"";**/
 SwitchTo(IN_STRING_LITERAL);
 }
}


<IN_STRING_LITERAL>
MORE:
{
      <(~["\"","\\","$"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\"","$"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
         )
      >

}


/* IDENTIFIERS */

TOKEN :
{
 <ABSOLUTE_PATH: <PATH> >
|
 < RELATIVE_PATH: (<CURRENT_DIR> | <PARENT_DIR>) (<PATH>)* >
|
 < FULL_URL: <SCHEME> ("//")? (<ABSOLUTE_PATH>)? >
|
 < #PATH: "/" (<LETTER> |<DIGIT> | "*" |":" | "/"| "." | "_" | "+" | "%" | "$" | "-" | "=" | "+" |  "&" | "?" )* >
|
 < #SCHEME: (<LETTER> |<DIGIT>) + ":" >
|
 < #CURRENT_DIR: "." >
|
 < #PARENT_DIR: "..">
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT> | ".")* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < AT: "@" >
/*| < NEWLINE: "\n" >*/
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < IDENTITY: "==" >
| < EQUALS: "?=" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < DYNAMICMEMBER: "->" >
| < DIALECT: "::" >
| < TOP_LEVEL: ":::">
| < DOUBLE_QUESTION : "??">
| < LESS_EQUALS_GREATER : "<=>">
| < EQUALS_GREATER : "=>">
| < SWAP : "<->">
| < BAR_MINUS : "|-">
| < MINUS_BAR : "-|">
| < LESS_THAN_MINUS : "<-">
| < LESS_THAN_AMP : "<&">
| < LESS_THAN_PLUS : "<+">
| < LESS_THAN_QUESTION : "<?">
| < LESS_THAN_QUESTION_QUESTION : "<??">
| < LESS_THAN_EXCLAMATION : "<!">
| < LESS_THAN_STAR : "<*">
| < AMP_GREATER_THAN : "&>">
| < PLUS_GREATER_THAN : "+>">
| < QUESTION_GREATER_THAN : "?>">
| < QUESTION_QUESTION_GREATER_THAN : "??>">
| < EXCLAMATION_GREATER_THAN : "!>">
| < STAR_GREATER_THAN : "*>">
| < AMP_EQUALS : "@=">
| < AMP_AMP : "@@">
| < STAR_STAR : "**">



}




void Script():
{
ExecutableCommand j;
CommandGroup g= new CommandGroup();
}
{

	(j= Statement() {g.add(j);})+

	{
      try {

        helper.start();
        g.execute();
        helper.stop();
      } catch(Exception e) {
        helper.logError(e);
      }
	}


}




ExecutableCommand Statement():
{
ExecutableCommand j;
}
{
      (j= Command() | j=Block()) ";"

      {
        return j;
      }



}


ExecutableCommand Block():
{
CommandGroup g= new CommandGroup();
ExecutableCommand j;
}
{
    ("{" ( j= Statement()

      {
        g.add(j);
      }

      )*

      "}"
      )
      
      {
      return g;
      }



}



ExecutableCommand Command():
{
ExecutableCommand j;
}
{
      (
        j= BuiltinCommand() | j= UserCommand()

      )


      {
        return j;
      }


}



ExecutableCommand BuiltinCommand():
{
ExecutableCommand j;
}
{
      ( j= WhenCommand() | j=WithCommand() | j= CreatePoolCommand() | j= ExecCommand() )

      {
        return j;
      }


}



ExecutableCommand ExecCommand():
{
final String s;

}
{
    ("exec"  s=StringLiteral() )

    {
        return new NestedParserCommand(s);
     }

}

ExecutableCommand WhenCommand():
{
String s;
Command command;
ExecutableCommand commandGroup;

}
{
    ("when"  s=StringLiteral() commandGroup= Block())

    {

         return new CommandExecutionContext(new WhenCommand(commandGroup), new String[]{s}, commandFactory, executor, shellSession);
    }

}





ExecutableCommand WithCommand():
{
String arg1, arg2;
Command command;
ExecutableCommand commandGroup;

}
{
    ("with"  arg1=Identifier() arg2=Url()  commandGroup= Block())

    {

         return new CommandExecutionContext(new WithCommand(commandGroup), new String[]{arg1,arg2}, commandFactory, executor, shellSession);
    }

}



ExecutableCommand CreatePoolCommand():
{
String s;
Map m;
Command command;
ExecutableCommand commandGroup;

}
{
    ("create" "pool"  (s= Url() | s=StringLiteral())  m=AttributeBlock())

    {

         return new CommandExecutionContext(new CreatePoolCommand(m), new String[]{s}, commandFactory, executor, shellSession);
    }

}


Map AttributeBlock():
{
String s;
Map m= new HashMap();
Command command;
ExecutableCommand commandGroup;

}
{
    "{" ( SetAttribute(m) (";")? )* "}"

    {

         return m;
    }

}


void SetAttribute(Map map):
{
String a,s;
Command command;
ExecutableCommand commandGroup;

}
{
    ( a=Identifier() "=" s=StringLiteral() )

    {

         map.put(a,s);
    }

}



ExecutableCommand UserCommand():
{
List<String> args= new ArrayList<String>();
String a,s;
Command command;
}
{
    (s= Identifier()  ( a=Argument() { args.add(a);} ) *)

    {
         command= commandFactory.getCommandByName(s);
         if(command == null) {
            System.err.println("Unrecognized command "+s);
            throw new RuntimeException("Unrecognized command "+s);
         }
         return new CommandExecutionContext(command, args.toArray(new String[args.size()]), commandFactory, executor, shellSession);
    }

}

String Argument():
{String s;}
{
    (s= Option() | LOOKAHEAD(2)  s=Url() | s=StringLiteral() | LOOKAHEAD(2) s= TimeOrInteger())
    {
    return s;
    }
}

String Option():
{String s;}
{
    (s= ShortOption() | s=LongOption())
    {
    return s;
    }
}

String ShortOption():
{Token t;}
{
    (t= <SHORT_OPTION>)
    {
    return t.image;
    }
}

String LongOption():
{Token t;}
{
    (t= <LONG_OPTION>)
    {
    return t.image;
    }
}


String StringLiteral():
{Token t;}
{
 t=<STRING_LITERAL>

 {return t.image.substring(1,t.image.length()-1);}
}



String Url():
{Token t;}
{
 (t=<FULL_URL> | t=<ABSOLUTE_PATH> | t=<RELATIVE_PATH> | t=<IDENTIFIER> | t=<INTEGER_LITERAL> | t=<FLOATING_POINT_LITERAL> | t=<DOUBLE_LITERAL> )

 {return t.image;}
}


String Integer():
{Token t;}
{
 t=<INTEGER_LITERAL>

 {
 return t.image;
 }
}

String TimeOrInteger():
{Token t;
String s;}
{
(

 LOOKAHEAD(2)(  t=<INTEGER_LITERAL> "ms"
 {
 s= t.image;
 }
 )

 |

 LOOKAHEAD(2) ( t=<INTEGER_LITERAL> "s"
 {
 s= String.valueOf(Long.parseLong(t.image)*1000);
 }
 )

  |

  LOOKAHEAD(2) (  t=<INTEGER_LITERAL> "m"
  {
  s= String.valueOf(Long.parseLong(t.image)*60*1000);
  })

  |

  LOOKAHEAD(2) (  t=<INTEGER_LITERAL> "h"
  {
  s= String.valueOf(Long.parseLong(t.image)*60*60*1000);
  })

   |

  LOOKAHEAD(2)  ( t=<INTEGER_LITERAL> "d"
  {
  s= String.valueOf(Long.parseLong(t.image)*24*60*60*1000);
  })
  |

   LOOKAHEAD(2)(  t=<INTEGER_LITERAL> 
   {
   s= t.image;
   }
   )
   )

  
  {
   return s;
  }
}


String Identifier():
{
    Token i;
}
{

    i=<IDENTIFIER>

    { return i.image; }


}

/* Some of these are reserved. */
String Builtin():
{
}
{
    ("when" | "pool" | "create" | "exec" | "with")
    {
       return token.image;
    }

}

void Operator():
{}
{


  "@"

|  "@@"
|  "@="

|  "="
|  "+"
|  "-"
|  "*"

|  "<"
|  ">"
|  ">="
|  "<="
|  "=="
|  "!="

|  "!"
|  "~"
|  "&"
|  "|"
|  "^"
|  "%"

|  "?"
|  "?="
|  "??"

|  "||"
|  "&&"
|  "++"
|  "--"

|  "+="
|  "-="
|  "*="
|  "&="
|  "|="
|  "^="
|  "%="

|  "|-"
|  "-|"

|  "<<="
|  "<<"
|  ">>="
|  ">>>="
|  "->"
|  "=>"
|  "<->"
|  "<=>"
|  "<-"
|  "<&"
|  "<+"
|  "<?"
|  "<??"
|  "<!"
|  "<*"
|  "&>"
|  "+>"
|  "?>"
|  "??>"
|  "!>"
|  "*>"
|  "**"



}
